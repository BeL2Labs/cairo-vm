var searchIndex = JSON.parse('{\
"cleopatra_cairo":{"doc":"","t":[14,14,14,0,0,14,0,0,0,0,5,5,5,5,5,5,5,5,0,3,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,5,5,5,5,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,4,13,13,13,13,13,4,13,3,13,13,13,13,13,13,13,4,4,4,4,13,13,13,4,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,12,11,12,11,12,11,12,11,11,11,11,11,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,12,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,0,0,0,0,0,0,0,0,0,3,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,0,5,0,0,0,0,0,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,5,5,0,0,3,8,3,3,3,3,10,11,11,11,11,11,10,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,0,3,3,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,5,11,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,12,11,11,11,11,12,11,11,12,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,0,0,12,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,3,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11],"n":["bigint","bigint64","bigint_str","cairo_run","math_utils","relocatable","serde","types","utils","vm","cairo_run","write_binary_memory","write_binary_trace","write_output","ec_add","ec_double","ec_double_slope","line_slope","deserialize_program","ApTracking","FlowTrackingData","HintParams","Identifier","ProgramJson","accessible_scopes","ap_tracking","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builtins","clone","clone","clone","clone_into","clone_into","clone_into","code","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_array_of_bigint_hex","deserialize_bigint_hex","deserialize_map_to_string_and_bigint_hashmap","deserialize_program","deserialize_program_json","eq","eq","eq","flow_tracking_data","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","group","hints","identifiers","into","into","into","into","into","ne","ne","ne","offset","pc","prime","reference_ids","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","errors","instruction","program","relocatable","program_errors","IO","Parse","ProgramError","borrow","borrow_mut","fmt","fmt","from","from","from","into","to_string","try_from","try_into","type_id","vzip","0","0","AP","AP","APPlus2","Add","Add","Add1","Add2","ApUpdate","AssertEq","Call","Dst","FP","FP","FpUpdate","Imm","Instruction","Jnz","Jump","JumpRel","Mul","NOp","Op0","Op1","Op1Addr","Opcode","PcUpdate","Register","Regular","Regular","Regular","Res","Ret","Unconstrained","ap_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","dst_register","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fp_update","from","from","from","from","from","from","from","from","imm","into","into","into","into","into","into","into","into","ne","off0","off1","off2","op0_register","op1_addr","opcode","pc_update","res","size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Program","borrow","borrow_mut","builtins","clone","clone_into","data","from","hints","into","main","new","prime","to_owned","try_from","try_into","type_id","vzip","Int","MaybeRelocatable","Relocatable","RelocatableValue","add_int_mod","add_mod","add_usize_mod","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from","from","from","hash","hash","into","into","ne","ne","offset","relocate_value","segment_index","sub","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","from_relocatable_to_indexes","is_subsequence","to_field_element","context","decoding","errors","hints","runners","trace","vm_core","vm_memory","run_context","RunContext","ap","borrow","borrow_mut","compute_dst_addr","compute_op0_addr","compute_op1_addr","fp","from","into","pc","prime","try_from","try_into","type_id","vzip","decoder","decode_instruction","cairo_run_errors","memory_errors","runner_errors","trace_errors","vm_errors","CairoRunError","Program","Runner","Trace","VirtualMachine","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","vzip","0","0","0","0","AddressNotRelocatable","EffectiveSizesNotCalled","FoundNonInt","InconsistentMemory","MemoryError","NumOutOfBounds","Relocation","UnallocatedSegment","borrow","borrow_mut","eq","fmt","fmt","from","into","ne","to_string","try_from","try_into","type_id","vzip","0","0","1","1","2","EcOpBuiltinScalarLimit","ExpectedInteger","FailedMemoryGet","FailedStringConversion","MemoryGet","MemoryInitializationError","MemoryValidationError","MissingMain","NoAP","NoExecBase","NoExecBaseForEntrypoint","NoFP","NoPC","NoProgBase","NonRelocatableAddress","RunnerError","UninitializedBase","WriteFail","borrow","borrow_mut","eq","fmt","fmt","from","into","ne","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","MemoryError","NoRelocationFound","RegNotRelocatable","TraceError","borrow","borrow_mut","eq","fmt","fmt","from","into","ne","to_string","try_from","try_into","type_id","vzip","0","CantWriteReturnFp","CantWriteReturnPc","DiffAssertValues","DiffIndexSub","ImmShouldBe1","InconsistentAutoDeduction","InvalidApUpdate","InvalidHintEncoding","InvalidInstructionEncoding","InvalidOp1Reg","InvalidOpcode","InvalidPcUpdate","InvalidRes","MemoryError","NoDst","NotImplemented","OffsetExeeded","PureValue","RelocatableAdd","RunnerError","UnconstrainedResAdd","UnconstrainedResAssertEq","UnconstrainedResJump","UnconstrainedResJumpRel","UnknownHint","UnknownOp0","VirtualMachineError","borrow","borrow_mut","eq","fmt","fmt","from","into","ne","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","2","execute_hint","hint_utils","execute_hint","add_segment","builtin_runner","cairo_runner","BitwiseBuiltinRunner","BuiltinRunner","EcOpBuiltinRunner","HashBuiltinRunner","OutputBuiltinRunner","RangeCheckBuiltinRunner","add_validation_rule","add_validation_rule","add_validation_rule","add_validation_rule","add_validation_rule","add_validation_rule","base","base","base","base","base","base","base","base","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","deduce_memory_cell","from","from","from","from","from","initial_stack","initial_stack","initial_stack","initial_stack","initial_stack","initial_stack","initialize_segments","initialize_segments","initialize_segments","initialize_segments","initialize_segments","initialize_segments","into","into","into","into","into","new","new","new","new","new","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CairoRunner","borrow","borrow_mut","from","initialize_main_entrypoint","initialize_segments","initialize_vm","into","new","relocate","relocated_memory","relocated_trace","run_until_pc","try_from","try_into","type_id","vm","vzip","write_output","trace_entry","RelocatedTraceEntry","TraceEntry","ap","ap","borrow","borrow","borrow_mut","borrow_mut","deserialize","eq","eq","fmt","fmt","fp","fp","from","from","into","into","ne","ne","pc","pc","relocate_trace_register","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Operands","VirtualMachine","_program_base","borrow","borrow","borrow_mut","borrow_mut","builtin_runners","eq","fmt","from","from","hints","into","into","memory","ne","new","prime","run_context","segments","step","trace","try_from","try_from","try_into","try_into","type_id","type_id","verify_auto_deductions","vzip","vzip","memory","memory_segments","0","Memory","ValidationRule","add_validation_rule","borrow","borrow","borrow_mut","borrow_mut","data","default","from","from","get","insert","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","validate_existing_memory","validated_addresses","validation_rules","vzip","vzip","MemorySegmentManager","add","borrow","borrow_mut","compute_effective_sizes","default","from","into","load_data","new","num_segments","relocate_segments","segment_used_sizes","try_from","try_into","type_id","vzip"],"q":["cleopatra_cairo","","","","","","","","","","cleopatra_cairo::cairo_run","","","","cleopatra_cairo::math_utils","","","","cleopatra_cairo::serde","cleopatra_cairo::serde::deserialize_program","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::types","","","","cleopatra_cairo::types::errors","cleopatra_cairo::types::errors::program_errors","","","","","","","","","","","","","","","","cleopatra_cairo::types::errors::program_errors::ProgramError","","cleopatra_cairo::types::instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::types::program","","","","","","","","","","","","","","","","","","cleopatra_cairo::types::relocatable","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::types::relocatable::MaybeRelocatable","","cleopatra_cairo::utils","","","cleopatra_cairo::vm","","","","","","","","cleopatra_cairo::vm::context","cleopatra_cairo::vm::context::run_context","","","","","","","","","","","","","","","","cleopatra_cairo::vm::decoding","cleopatra_cairo::vm::decoding::decoder","cleopatra_cairo::vm::errors","","","","","cleopatra_cairo::vm::errors::cairo_run_errors","","","","","","","","","","","","","","","","cleopatra_cairo::vm::errors::cairo_run_errors::CairoRunError","","","","cleopatra_cairo::vm::errors::memory_errors","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::errors::memory_errors::MemoryError","","","","","cleopatra_cairo::vm::errors::runner_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::errors::runner_errors::RunnerError","","","","","","cleopatra_cairo::vm::errors::trace_errors","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::errors::trace_errors::TraceError","cleopatra_cairo::vm::errors::vm_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::errors::vm_errors::VirtualMachineError","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::hints","","cleopatra_cairo::vm::hints::execute_hint","cleopatra_cairo::vm::hints::hint_utils","cleopatra_cairo::vm::runners","","cleopatra_cairo::vm::runners::builtin_runner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::runners::cairo_runner","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::trace","cleopatra_cairo::vm::trace::trace_entry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::vm_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::vm_memory","","cleopatra_cairo::vm::vm_memory::memory","","","","","","","","","","","","","","","","","","","","","","","","","","","","cleopatra_cairo::vm::vm_memory::memory_segments","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","Writes a trace as a binary file. Bincode encodes to little …","","Gets two points on an elliptic curve mod p and returns …","Doubles a point on an elliptic curve with the equation y^2 …","Computes the slope of an elliptic curve with the equation …","Computes the slope of the line connecting the two given EC …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Adds a bigint to self, then performs mod prime","Adds a MaybeRelocatable to self, then performs mod prime …","Adds a usize to self, then performs mod prime if prime is …","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Turns a MaybeRelocatable into a BigInt value If the value …","","Substracts two MaybeRelocatable values and returns the …","","","","","","","","","","","","","","","Converts val to an integer in the range (-prime/2, …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Decodes an instruction. The encoding is little endian, so …","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the builtin’s base","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Creates the necessary segments for the builtin in the …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Initializes state for running a program from the main() …","Creates the necessary segments for the program, execution, …","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Writes the values hosted in the output builtin’s segment …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Makes sure that all assigned memory cells are consistent …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Inserts an MaybeRelocatable value into an address given by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Applies validation_rules to the current memory","","","","","","Adds a new segment and returns its starting location as a …","","","Calculates the size (number of non-none elements) of each …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Writes data into the memory at address ptr and returns the …","","","Returns a vector that contains the first relocated address …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,8,10,7,8,9,11,10,7,8,9,11,10,7,8,9,7,8,9,7,10,10,7,8,9,11,0,0,0,0,0,7,8,9,7,10,7,8,9,11,10,7,8,9,11,9,10,10,10,7,8,9,11,7,8,9,9,11,10,8,7,8,9,10,7,8,9,11,10,7,8,9,11,10,7,8,9,11,10,7,8,9,11,0,0,0,0,0,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,56,57,25,27,31,28,30,30,30,0,32,32,31,25,27,0,27,0,29,29,29,28,32,27,28,0,0,0,0,29,30,31,0,32,28,26,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,26,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,26,25,26,27,28,29,30,31,32,26,25,26,27,28,29,30,31,32,26,26,26,26,26,26,26,26,26,26,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,25,26,27,28,29,30,31,32,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,13,0,0,13,13,13,13,36,13,36,13,36,13,36,13,36,13,36,13,36,36,13,13,13,36,13,36,13,36,13,36,0,36,13,36,13,36,13,36,13,36,13,36,13,58,59,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,60,61,62,63,37,37,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,64,65,64,65,65,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,66,67,68,69,70,71,41,41,41,0,41,41,41,41,41,41,41,41,41,41,41,41,41,72,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,73,74,75,76,77,78,79,80,81,82,83,84,85,86,76,77,78,82,82,0,0,0,0,0,0,0,0,0,0,0,0,87,44,45,46,47,48,87,44,45,46,47,48,46,47,48,44,45,46,47,48,44,45,46,47,48,87,44,45,46,47,48,44,45,46,47,48,87,44,45,46,47,48,87,44,45,46,47,48,44,45,46,47,48,44,45,46,47,48,44,45,46,47,48,44,45,46,47,48,44,45,46,47,48,44,45,46,47,48,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,53,52,53,52,53,52,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,0,52,53,52,53,52,53,52,53,52,0,0,42,42,54,42,54,42,54,54,42,54,42,42,54,42,54,42,42,42,42,42,42,42,54,42,54,42,54,42,42,54,0,0,55,0,0,43,55,43,55,43,43,43,55,43,43,43,55,43,43,55,43,55,43,55,43,43,43,43,55,43,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49],"f":[0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],[1,5],[1,5],[2,[[4,[3]]]],[6],[[6,6]],[[6,6],6],[6,6],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[7,7],[8,8],[9,9],[[]],[[]],[[]],0,0,[[],[[4,[10]]]],[[],[[4,[7]]]],[[],[[4,[8]]]],[[],[[4,[9]]]],[[],[[4,[11]]]],[12,[[4,[[14,[13]]]]]],[12,[[4,[6]]]],[12,[[4,[[16,[15,6]]]]]],[1,[[4,[17,18]]]],[1,[[4,[10,18]]]],[[7,7],19],[[8,8],19],[[9,9],19],0,[[10,20],21],[[7,20],21],[[8,20],21],[[9,20],21],[[11,20],21],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[7,7],19],[[8,8],19],[[9,9],19],0,0,0,0,[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[18,20],21],[[18,20],21],[[]],[23,18],[24,18],[[]],[[],15],[[],4],[[],4],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[25,25],19],[[26,26],19],[[27,27],19],[[28,28],19],[[29,29],19],[[30,30],19],[[31,31],19],[[32,32],19],[[25,20],21],[[26,20],21],[[27,20],21],[[28,20],21],[[29,20],21],[[30,20],21],[[31,20],21],[[32,20],21],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,26],19],0,0,0,0,0,0,0,0,[26,33],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],0,[17,17],[[]],0,[[]],0,[[]],0,[1,[[4,[17,18]]]],0,[[]],[[],4],[[],4],[[],22],[[]],0,0,0,0,[[13,6,6],[[4,[13,34]]]],[[13,13,6],[[4,[13,34]]]],[[13,33,[35,[6]]],13],[[]],[[]],[[]],[[]],[36,36],[13,13],[[]],[[]],[[36,36],19],[[13,13],19],[[36,20],21],[[13,20],21],[[]],[[],36],[[]],[[],13],[6,13],[36],[13],[[]],[[]],[[36,36],19],[[13,13],19],0,[[13,14],[[4,[6,37]]]],0,[[13,13],[[4,[13,34]]]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[]],[[]],0,0,[36],[[],19],[[6,6],6],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[38,26],[[4,[13,34]]]],[[38,26],[[4,[13,34]]]],[[38,26,[35,[13]]],[[4,[13,34]]]],0,[[]],[[]],0,0,[[],4],[[],4],[[],22],[[]],0,[[39,[35,[6]]],[[4,[26,34]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[3,20],21],[[3,20],21],[[]],[[]],[[],15],[[],4],[[],4],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[37,37],19],[[37,20],21],[[37,20],21],[[]],[[]],[[37,37],19],[[],15],[[],4],[[],4],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[40,40],19],[[40,20],21],[[40,20],21],[[]],[[]],[[40,40],19],[[],15],[[],4],[[],4],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[41,41],19],[[41,20],21],[[41,20],21],[[]],[[]],[[41,41],19],[[],15],[[],4],[[],4],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[34,34],19],[[34,20],21],[[34,20],21],[[]],[[]],[[34,34],19],[[],15],[[],4],[[],4],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42,[[4,[34]]]],[42,[[4,[34]]]],0,0,0,0,0,0,0,0,[43],[[44,43]],[[45,43]],[[46,43]],[[47,43]],[[48,43]],[[],[[35,[36]]]],[44,[[35,[36]]]],[45,[[35,[36]]]],[46,[[35,[36]]]],[47,[[35,[36]]]],[48,[[35,[36]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,43],[[4,[[35,[13]],40]]]],[[44,13,43],[[4,[[35,[13]],40]]]],[[45,13,43],[[4,[[35,[13]],40]]]],[[46,13,43],[[4,[[35,[13]],40]]]],[[47,13,43],[[4,[[35,[13]],40]]]],[[48,13,43],[[4,[[35,[13]],40]]]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[[14,[13]],40]]]],[44,[[4,[[14,[13]],40]]]],[45,[[4,[[14,[13]],40]]]],[46,[[4,[[14,[13]],40]]]],[47,[[4,[[14,[13]],40]]]],[48,[[4,[[14,[13]],40]]]],[[49,43]],[[44,49,43]],[[45,49,43]],[[46,49,43]],[[47,49,43]],[[48,49,43]],[[]],[[]],[[]],[[]],[[]],[[19,6,50],44],[19,45],[[19,33],46],[[19,33],47],[[19,33],48],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[2,[[4,[13,40]]]],[[2,[35,[36]]]],[2,[[4,[40]]]],[[]],[17,2],[2,[[4,[41]]]],0,0,[[2,13],[[4,[34]]]],[[],4],[[],4],[[],22],0,[[]],[[2,51],[[4,[40]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[],[[4,[52]]]],[[53,53],19],[[52,52],19],[[53,20],21],[[52,20],21],0,0,[[]],[[]],[[]],[[]],[[53,53],19],[[52,52],19],0,0,[[13,14],[[4,[33,41]]]],[52,4],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,[[54,54],19],[[54,20],21],[[]],[[]],0,[[]],[[]],0,[[54,54],19],[[6,14],42],0,0,0,[42,[[4,[34]]]],0,[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[42,[[4,[34]]]],[[]],[[]],0,0,0,0,0,[[43,33,55]],[[]],[[]],[[]],[[]],0,[[],43],[[]],[[]],[[43,13],[[4,[[35,[13]],37]]]],[[43,13,13],[[4,[37]]]],[[]],[[]],[[],43],[[],4],[[],4],[[],4],[[],4],[[],22],[[],22],[43,[[4,[37]]]],0,0,[[]],[[]],0,[[49,43,[35,[33]]],36],[[]],[[]],[[49,43]],[[],49],[[]],[[]],[[49,43,13,[14,[13]]],[[4,[13,37]]]],[[],49],0,[49,[[4,[[14,[33]],37]]]],0,[[],4],[[],4],[[],22],[[]]],"p":[[3,"Path"],[3,"CairoRunner"],[4,"CairoRunError"],[4,"Result"],[6,"Result"],[3,"BigInt"],[3,"HintParams"],[3,"FlowTrackingData"],[3,"ApTracking"],[3,"ProgramJson"],[3,"Identifier"],[8,"Deserializer"],[4,"MaybeRelocatable"],[3,"Vec"],[3,"String"],[3,"HashMap"],[3,"Program"],[4,"ProgramError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"Error"],[3,"Error"],[4,"Register"],[3,"Instruction"],[4,"Op1Addr"],[4,"Res"],[4,"PcUpdate"],[4,"ApUpdate"],[4,"FpUpdate"],[4,"Opcode"],[15,"usize"],[4,"VirtualMachineError"],[4,"Option"],[3,"Relocatable"],[4,"MemoryError"],[3,"RunContext"],[15,"i64"],[4,"RunnerError"],[4,"TraceError"],[3,"VirtualMachine"],[3,"Memory"],[3,"RangeCheckBuiltinRunner"],[3,"OutputBuiltinRunner"],[3,"HashBuiltinRunner"],[3,"BitwiseBuiltinRunner"],[3,"EcOpBuiltinRunner"],[3,"MemorySegmentManager"],[15,"u32"],[8,"Write"],[3,"RelocatedTraceEntry"],[3,"TraceEntry"],[3,"Operands"],[3,"ValidationRule"],[13,"IO"],[13,"Parse"],[13,"RelocatableValue"],[13,"Int"],[13,"Program"],[13,"VirtualMachine"],[13,"Trace"],[13,"Runner"],[13,"UnallocatedSegment"],[13,"InconsistentMemory"],[13,"MemoryValidationError"],[13,"MemoryInitializationError"],[13,"ExpectedInteger"],[13,"MemoryGet"],[13,"FailedMemoryGet"],[13,"EcOpBuiltinScalarLimit"],[13,"MemoryError"],[13,"InvalidOp1Reg"],[13,"InvalidApUpdate"],[13,"InvalidPcUpdate"],[13,"DiffAssertValues"],[13,"CantWriteReturnPc"],[13,"CantWriteReturnFp"],[13,"InvalidRes"],[13,"InvalidOpcode"],[13,"OffsetExeeded"],[13,"InconsistentAutoDeduction"],[13,"RunnerError"],[13,"InvalidHintEncoding"],[13,"MemoryError"],[13,"UnknownHint"],[8,"BuiltinRunner"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
